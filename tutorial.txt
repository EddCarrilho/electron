Tutorial Electron

1) Iniciar um novo projeto node
    npm init

(seguir a documentação)

2) Criar uma estrutura de pastas (modelo de camadas MVC)
src
|---- views
        |--- index.html
|---- public
        |--- css
        |--- img
        |--- js

3) Personalização da janela
    - dimensões
    - redirecionamento
    - cor
    - ícone
    - menu e barra de título

4) Personalização do menu
template -> estrutura de dados
Passo 1: importar o recurso Menu e criar template
Passo 2: exibir o template no lugar do menu original

Obs: alguns recursos precisam ser importados:
Exemplo: Acesso a links externos
shell

Obs2: o shell é usado no main para acessar recursos externos (links)

5) Processos (principal e renderização)
  - Só pode existir um processo principal (main.js)
  - Para criar um processo de renderização devemos ligar um documento js na página html
  - Podemos usar um único processo de renderização para todas as páginas html, porém é recomendado usar um processo de renderização por documento html
  - por uma questão didática podemos dizer que o processo de renderização é o front-end da aplicação e o processo principal é o back-end da aplicação

    preload.js (seguir a documentação para implementar)
o preload.js é usado para:
1) Expor a utilização do node e recursos do electron para o processo de rendererização, melhorando o desempenho e a segurança
2) Para situações onde você sabe que vai precisar de certos recursos e dados antes que o usuário solicite diretamente, tornando a experiência do ususário mais rápida e suave

Obs: é possível tirar o contexto de isolamento e permitir a execução do node.js no processo de renderização.

IPC (inter-process communication)
ipcMain (processo principal)
ipcRenderer (processo de rendererização)

sintaxe ipcMain e ipcRenderer (recebimento)
on()
ipcMain.on(()=>{})
ipcRenderer.on(()=>{})

                      preload.js

 Fluxo: ipcRederer -> hello() -> main.js (ipcMain)

 ---------------------------------------------------------------------------



 Para usar o bootstrap seguir a documentação:
 Dica: O bootstrap trabalha com conceitos de classes
 O bootstrap trabalha com conceitos de classes
 Inicie criando um container (div.container)

____________________________________________________________________________
Relação entre janelas (parent-child) e modal
- Foco do usuário no sistema
- Segurança e desempenho

Passo 1: Determinar a janela pai (principal)
Passo 2: Criar o relacionamento entre as janelas

____________________________________________________________________________

IPC - Comunicação segura entre Processos

ipcMain (main.js)
       || ---------------------- preload.js 
ipcRenderer (renderer.js)

Obs:
1) main.js (processo principal e único)
2) renderer.js (processo de renderização)
    - Podem existir vários processos de renderização
    - renderer.js (nome atribuído - você não pode escolher qualquer nome)